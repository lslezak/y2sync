#! /usr/bin/env ruby

$LOAD_PATH.unshift("#{__dir__}/../lib")

require "y2sync"

module Y2sync
  # FIXME: more branches
  IGNORED_REPOS = {
    # FIXME
    "SLE-12-GA"  => [],
    "SLE-12-SP1" => [],
    "SLE-12-SP2" => [],
    "SLE-12-SP3" => [],
    "SLE-12-SP4" => [],
    "SLE-15-GA"  => [],
    "SLE-15-SP1" => [],
    "SLE-15-SP2" => [],
    "SLE-15-SP3" => [],
    "SLE-15-SP4" => [],
    "master"     => [
      "skelcd-control-SLES-for-VMware",
      "rubygem-scc_api",
      "yast-autofs",
      "yast-backup",
      "yast-bluetooth",
      "yast-boot-server",
      "yast-cd-creator",
      "yast-certify",
      "yast-cim",
      "yast-databackup",
      "yast-dbus-client",
      "yast-debugger",
      "yast-dialup",
      "yast-dirinstall",
      "yast-fax-server",
      "yast-fingerprint-reader",
      "yast-heartbeat",
      "yast-hpc",
      "yast-ipsec",
      "yast-irda",
      "yast-iscsi-server",
      "yast-kerberos-client",
      "yast-kerberos-server",
      "yast-liby2util",
      "yast-live-installer",
      "yast-ldap-client",
      "yast-ldap-server",
      "yast-lxc",
      "yast-meta",
      "yast-mouse",
      "yast-mail-server",
      "yast-mysql-server",
      "yast-ntsutils",
      "yast-oem-installation",
      "yast-online-update-test",
      "yast-openschool",
      "yast-openteam",
      "yast-openvas-security-scanner",
      "yast-openwsman-yast",
      "yast-packagemanager",
      "yast-packagemanager-test",
      "yast-phone-services",
      "yast-power-management",
      "yast-profile-manager",
      "yast-repair",
      "yast-restore",
      "yast-runlevel",
      "yast-squidguard",
      "yast-sshd",
      "yast-sudo",
      "yast-support",
      "yast-system-profile",
      "yast-system-update",
      "yast-slepos-image-builder",
      "yast-slepos-system-manager",
      "yast-slide-show",
      "yast-tv",
      "yast-ui-qt-tests",
      "yast-update-alternatives",
      "yast-uml",
      "yast-wagon",
      "yast-you-server",
      "yast-yxmlconv",
      "yast-y2pmsh",
      "yast-y2r-tools",
      "ycp-killer",
      "y2r",
      "travis_old"
    ]
  }.freeze
end

options = Y2sync::Options.instance

logger = Y2sync::Logger.new($stdout)
logger.level = Logger::DEBUG if options.debug

logger.debug "-" * 60
logger.debug "Starting #{$PROGRAM_NAME}"
logger.debug { "options: #{options.inspect}" }

config = Y2sync::Config.read
logger.debug { "config: #{config.inspect}" }

options.command = config.file.nil? ? "clone" : "refresh" if options.command.nil?

case options.command
when "clone"
  puts "Reading all #{options.org} repositories..."
  repos = Y2sync::Repo.all(options.org)
  logger.debug { "Github repositories: #{repos.map { |r| r.repo.name }.inspect}" }

  puts "Found #{repos.size} repositories"
  results = Y2sync::Repo.sync_all(repos)
  logger.debug { "Results: #{results}" }

  # report the summary to the user
  summary = Y2sync::Results.new(results)
  summary.print

  exit 1 if results.any? { |r| !r.success }

  # config.write
when "refresh"
  puts "Refreshing the current repositories..."
when "update"
  puts "Updating the current checkout..."
end
